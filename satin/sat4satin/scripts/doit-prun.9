#!/bin/sh
depth=0;
if [ $# -ne 1 ]; then
    echo "Usage: $0 problemdir" >&2
    exit 1
fi

case "$1" in
*/)
	# All problems in that directory
	dir="$1"
	problems=`(cd $dir; ls *cnf*)`
	;;
*)
	# A single problem
	dir=`dirname $1`
	problems=`basename $1`
	;;
esac

#PROBLEMS=UF250.1065.100
#dir=/home2/versto/Projects/SAT/SATLIB/longmult/BMC-dimacs-examples-0.0/unsatisfiable;
#dir=/home2/versto/Projects/SAT/SATLIB/UF75.325.100
#dir=/home2/versto/Projects/SAT/SATLIB/UF250.1065.100
#dir=/home2/versto/Projects/SAT/SATLIB/$PROBLEMS
#dir=/home2/versto/Projects/SAT/SATLIB/UUF225.960.100
#dir=../sat/examples/uuf100.430.1000
#dir=/home2/versto/Projects/SAT/SATLIB/FPGA_SWB_UNS/

defopts=""
defopts="$defopts -Dmaxdecisiondepth=400"
#defopts="$defopts -Dmaxspawndepth=100"
# *************************
# CHANGED to prevent many out of memory issues:
defopts="$defopts -Dmaxspawndepth=10"
#defopts="$defopts -Dclone=cloning"
#defopts="$defopts -Dclone=ibis"
#defopts="$defopts -Dclone=sun"
defopts="$defopts -Dusearrays=1"
#defopts="$defopts -DconflictInc=4"
#defopts="$defopts -DconflictInc=64"
#defopts="$defopts -DlearntInc=1.1"
#defopts="$defopts -DlearntInc=1.5"
#defopts="$defopts -DlearntInc=1.3"
# *************************
# *** effects of increasing learntInc are VERY mixed, often detrimental!! ***
defopts="$defopts -DlearntInc=1.1"
defopts="$defopts -Dsatin.so=true -Dsatin.ft=false"
#defopts="$defopts -DconflictInit=5000000"
#defopts="$defopts -Dfixes=1"
solver=MiniSATLimitedRestarts
#solver=MiniSAT2Heap
#prunopts="-reserve 145771"
prunopts=""
#prunopts="-o split"

jvmopts="-Xms800M -Xmx800M"
#jvmopts="-Xms800M -Xmx800M -ea"
satinopts="-satin-stats -satin-tcp -satin-closed"
#fixes=0
#fixes=1
#fixes=7
#for i in `range 1 5`; do
for i in `range 1 1`; do
  echo $i;
  #for clone in cloning sun ibis; do
  #for clone in sun; do
  #for clone in ibis; do
  #for clone in ibis; do
  for clone in cloning; do
    for problem in $problems; do
      #for varorder in default; do
      #for varorder in heap; do
      #for varorder in varorder; do
      for varorder in default; do
	#for learn in 0 5 10 15 20 30; do
	for learn in 0; do
	  #for sharedclauses in 0; do
	  for sharedclauses in 1; do
	    #Hack: constraints not all counted in case of binary opt!!
	    #for learntC in 8.0; do
	    for learntC in 0.5; do
	      # for nodes in 1 2 4; do
	      #for nodes in 4; do
	      #for nodes in 1 8; do
	      #for nodes in 1 8; do
	      for nodes in 2; do
		for conflictInit in 100; do
		  # for iter in 100 300 500 1050 1550 2000; do
		  #for iter in 1000; do
		  #for iter in 5000; do
		  for iter in 16000; do
		    #for conflictInc in 8; do
		    for conflictInc in 1.5; do
		      if [ $nodes -gt 1 ]; then
		        conflictInc=`echo $nodes | awk '{ printf("%d\n", log(8 * $1)); }'`
		      fi
		      # for fixes in 15 31; do
		      #for fixes in 15; do
		      for fixes in 31; do
			#out="$problem-iter$iter-learn$learn-varOrder$varorder-learntC$learntC-conflictInit$conflictInit-conflictInc$conflictInc-clone$clone-shared$sharedclauses-fixes$fixes-$nodes.out"
			out="$problem-iter$iter-learn$learn-varOrder$varorder-$solver-clone$clone-shared$sharedclauses-fixes$fixes-$nodes.out"
			echo $out
			opts="$defopts"
			opts="$opts -Dfixes=$fixes"
			opts="$opts -Dclone=$clone"
			opts="$opts -Dmaxdepth=$depth"
			opts="$opts -Dmaxlearnsize=$learn"
			opts="$opts -Dmaxiter=$iter"
			opts="$opts -DlearntConstraint=$learntC"
			opts="$opts -DconflictInit=$conflictInit"
			opts="$opts -DconflictInc=$conflictInc"
			opts="$opts -Dsharedclauses=$sharedclauses"
			opts="$opts -DvarOrder=$varorder"
			# ******** EXPERIMENTAL *********
			#opts="$opts -Dsatin.stealfromhead=true"
			#opts="$opts -Dsatin.getfromtail=true"
			# time=`expr 40000 / $nodes`
			time=1800
			echo prun $prunopts -v -1 -t $time ~/ibis/bin/ibis-prun $nodes $jvmopts $opts \
			    org/sat4j/Lanceur $solver \
			    $dir/$problem $satinopts
			prun $prunopts -v -1 -t $time ~/ibis/bin/ibis-prun $nodes $jvmopts $opts \
			    org/sat4j/Lanceur $solver \
			    $dir/$problem $satinopts 2>&1 | tee -a $out
		      done
		    done
		  done
		done
	      done
	    done
	  done
	done
      done
    done
  done
done
